# -*- coding: utf-8 -*-
"""Raman_Sugars_Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u5U2aYW_5c2b5Tp3Jt_t7rXN9s5IiT9A

# Raman Sugar Dataset

## Goal of the Notebook

This notebook provides an example to load the spectra from the Raman Sugars spectral dataset. The dataset can be found in the following GitHub repo: [Raman_Sugars](https://github.com/Alvaro-FG/Raman_Sugars.git)


## Author Information:

- **Name:** Álvaro Fernández Galiana
- **Email:** alvaro.fernandezgaliana@gmail.com
- **Date:** 25.09.23
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import glob
import json
import re

"""## LOAD THE DATA
Load the data by cloning the GitHub Repo (skip if data is saved locally).
"""

clone = False # True to clone the data from GitHub

if clone:
    # Repository URL
    repo_url = 'https://github.com/Alvaro-FG/Raman_Sugars.git'

    # Local path
    local_path = '/content/Raman_Sugars'

    # Override folder option
    override = False # Change to 'True' if you want to override the

    # Check if the folder already exists
    if os.path.exists(local_path):
      if override:
        # If it exists, remove it (NOTE: THIS DELETES ALL FILES IN THE FOLDER)
        shutil.rmtree(local_path)
        print("Folder deleted")
        # Clone the repository
        os.system(f'git clone {repo_url}')
        print("Repository cloned -- overwritten")
      else:
        print("Folder already exists")
    else:
      # Clone the repository
      os.system(f'git clone {repo_url}')
      print("Repository cloned")

"""## Function definition
Define functions to read and parse the data.
"""

# Function to parse the filename
def parse_filename(filename):
    parts = filename.split("_")
    samp, row_col, plate, round, meas, rep = parts[-6:]

    # Separate the row and col from row_col
    match = re.match(r'([A-Za-z]+)(\d+)', row_col)
    if match:
        row, col = match.groups()
    else:
        raise ValueError(f"Couldn't extract row and col from: {row_col}")

    round = round[2:]
    meas = meas[1:]
    rep = rep[1:-4]

    return {"samp": samp, "row": row, "col": col, "plate": plate, "round": round, "meas": meas, "rep": rep}

# Function to read spectral info and metadata
def read_spectrum_csv(file_name):
    # Read DataFrame from CSV
    df_data = pd.read_csv(file_name)

    # Extract the metadata JSON string and convert to a dictionary
    metadata_json = df_data.iloc[-1, df_data.columns.get_loc("Metadata")]  # Get last row of Metadata column
    metadata_dict = json.loads(metadata_json)

    # Remove the metadata row from the DataFrame
    df_data = df_data.drop(df_data.tail(1).index)
    # Remove the metadata column from the DataFrame
    df_data = df_data.drop("Metadata", axis=1)

    return df_data, metadata_dict

# Function to read wavelength and intensity
def read_spectra(filename):
    df_data, metadata_dict = read_spectrum_csv(filename)
    wavelength = df_data['cm-1']
    intensity = df_data['Intensity']
    return wavelength, intensity

# Function to read concentration metadata
def read_concentration_metadata(filename):
    df = pd.read_csv(filename)
    # Rename the first column to 'Well'
    df = df.rename(columns={df.columns[0]: 'Well'})
    return df.set_index('Well')

"""## Read raw data
The generate_dataframes function aims to process spectral data stored in individual CSV files within a given directory, amalgamating the data into two structured pandas DataFrames. The function extracts metadata from each file's name and appends concentration metadata from a specified CSV file. This function ensures that each file's wavelength information is consistent.

### Data Structure:
#### Metadata DataFrame (metadata_df):

* **samp**: Number of the sample, not particularly relevant in this case.
* **row**: The row in which the sample is located, typically an alphabetical character(s) e.g. 'A'-'H'.
* **col**: The column in which the sample is located, typically a number 1-12.
* **plate**: Information about the plate of the measurement.
* **round**: Round of measurement.
* **meas**: Measurement number or type.
* **rep**: Represents a repeat number.
* **filename**: The name of the original file (without the '.csv' extension). This can be used to link to the spectra dataframe, as it corresponds to the column name in that dataframe.
* **Sucrose [ul]**: Corresponds to the volume of sucrose in the well (in ul).
* **Fructose [ul]**: Corresponds to the volume of fructose in the well (in ul).
* **Maltose [ul]**: Corresponds to the volume of maltose in the well (in ul).
* **Glucose [ul]**: Corresponds to the volume of glucose in the well (in ul).
* **Water [ul]**: Corresponds to the volume of water in the well (in ul).
* **Total Volume [ul]**: Corresponds to the Total Volume in the well (in ul).


#### Spectra DataFrame (spectra_df):

* **Wavenumber [cm-1]**: Represents the common wavelength, extracted from the first file.
* Additional columns named by the filenames (without '.csv' extension) containing spectral intensity values corresponding to each wavelength.


"""

def generate_dataframes(concentration_filename, data_folder, save = True):
    # Initial setups
    spectra_data = {'Wavenumber [cm-1]': None}
    metadata_list = []

    # Read the first file to get the common wavelength
    first_file = glob.glob(os.path.join(data_folder, '*.csv'))[0]
    common_wavelength, _ = read_spectra(first_file)
    spectra_data['Wavenumber [cm-1]'] = common_wavelength.tolist()

    # Read concentration metadata
    concentration_metadata = read_concentration_metadata(concentration_filename)

    # Loop through all csv files in the folder
    for filename in glob.glob(os.path.join(data_folder, '*.csv')):
        # Parsing metadata from filename
        parsed_info = parse_filename(os.path.basename(filename))

        # Reading spectrum and associated metadata
        wavelength, intensity = read_spectra(filename)

        # Check if wavelengths are consistent
        if not all(common_wavelength == wavelength):
            raise ValueError(f"Wavelength mismatch in {filename}")

        # Create metadata entry with filename (without .csv) and parsed info
        base_filename = os.path.basename(filename).replace('.csv', '')
        parsed_info["filename"] = base_filename

        # Determine the 'Well' identifier
        well_id = f"{parsed_info['row']}{parsed_info['col']}_{parsed_info['plate']}"

        # Add concentration data using the 'Well' identifier
        if well_id in concentration_metadata.index:
            for col, value in concentration_metadata.loc[well_id].items():
                parsed_info[col] = value

        metadata_list.append(parsed_info)

        # Adding intensity to spectra data
        spectra_data[base_filename] = intensity.tolist()

    # Convert to DataFrames
    spectra_df = pd.DataFrame(spectra_data)
    metadata_df = pd.DataFrame(metadata_list)

    # Save dataFrames in main folder
    if save:
        # Extract the last folder name from the full path
        folder_name = os.path.basename(data_folder)

        # Get the parent folder (one level up)
        parent_folder = os.path.dirname(data_folder)

        # Construct the CSV file names
        spectra_csv_filename = f'{folder_name}_ALL_spectra.csv'
        metadata_csv_filename = f'{folder_name}_ALL_metadata.csv'

        # Save the DataFrames to CSV files
        spectra_df.to_csv(os.path.join(parent_folder, spectra_csv_filename), index=False)
        metadata_df.to_csv(os.path.join(parent_folder, metadata_csv_filename), index=False)

    return metadata_df, spectra_df

"""## Example usage

### Loading raw data
Example loading raw data and generating the DataFrames.
"""

# Define folder and concentration filename
local_folder_path = os.path.dirname(os.path.abspath(__file__))
data_folder_path = os.path.join(local_folder_path, 'Sugar_Concentration_Test') # 'Sugar_Concentration_Test_Fast'
concentration_file_path = os.path.join(local_folder_path, 'Sugar_Concentrations.csv')

# Generate dataFrames
metadata_df, spectra_df = generate_dataframes(concentration_file_path, data_folder_path, save = False)

"""Print the metadata dataframe shape:"""

print(f'Metadata dataframe shape: {metadata_df.shape}')

"""Print the the spectra dataframe shape:"""

print(f'Spectra dataframe shape: {spectra_df.shape}')

"""### Reading compact csv
Example reading from the csv containing all data.
"""

# Load the CSV files into DataFrames from the parent folder
local_folder_path = os.path.dirname(os.path.abspath(__file__)) # Change to folder were data is saved locally if requiredain_
spectra_fast_df = pd.read_csv(os.path.join(local_folder_path, 'Sugar_Concentration_Test_Fast_ALL_spectra.csv'))
metadata_fast_df = pd.read_csv(os.path.join(local_folder_path, 'Sugar_Concentration_Test_Fast_ALL_metadata.csv'))

"""Print the metadata dataframe shape:"""

print(f'Metadata Fast dataframe shape: {metadata_fast_df.shape}')

"""Print the the spectra dataframe shape:"""

print(f'Spectra Fast dataframe shape: {spectra_fast_df.shape}')